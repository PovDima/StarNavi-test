{"version":3,"sources":["axios.js","config.js","actions/serverData.js","components/Leader/Leader.js","actions/game.js","components/Game/Game.js","App.js","serviceWorker.js","reducers/serverData.js","reducers/game.js","reducers/index.js","index.js","store/configureStore.js"],"names":["config","this","instance","axios","create","url","get","response","console","log","data","post","baseURL","SUCCESS_GET_SERVER_DATA","getServerData","dispatch","a","async","Promise","all","settingsData","winnersData","type","winners","settings","connect","state","serverData","props","className","length","map","winner","key","id","date","SUCCESS_SET_WINNER","SET_FIELD","SET_USER_FIELD","SET_COMPUTER_FIELD","START_AGAIN","setWinner","gameWinner","setActiveField","setUserField","setComputerField","startAgain","Game","mode","startGame","fields","activeArr","filter","field","isActive","computerFields","f","isRed","userFileds","isGreen","moment","format","clearInterval","interval","Math","floor","random","handleChange","e","setState","target","value","handleAgain","handleStart","setInterval","delay","handleSetField","renderInput","TextField","select","label","onChange","Object","keys","setting","MenuItem","placeholder","Button","variant","disabled","onClick","isBlue","classNames","PureComponent","game","GameActions","App","Component","ServerData","Boolean","window","location","hostname","match","initialState","i","uuid","d","combineReducers","action","newField","store","composeEnhancers","compose","createStore","rootReducer","applyMiddleware","thunkMiddleware","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.51f38932.chunk.js","sourcesContent":["import axios from 'axios'\nimport config from './config';\n\nclass Axios {\n  constructor(config) {\n    this.instance = axios.create({ ...config })\n  }\n\n  async get(url) {\n    try {\n      const response = await this.instance.get(url);\n      return response;\n    }\n    catch (error) {\n      console.log(error)\n    }\n  }\n\n  async post(url, data) {\n    try {\n      const response = await this.instance.post(url, data);\n      return response;\n    }\n    catch (error) {\n      console.log(error)\n    }\n  }\n}\n\nexport default new Axios(config);\n","export default {\n  baseURL :'https://starnavi-frontend-test-task.herokuapp.com'\n}\n","import axios from '../axios';\n\nexport const SUCCESS_GET_SERVER_DATA = 'SUCCESS_GET_SERVER_DATA';\n\nexport function getServerData() {\n    return async dispatch => {\n        try {\n            const [settingsData, winnersData] = await Promise.all([axios.get(`/game-settings`), axios.get(`/winners`)]);\n\n            dispatch({\n                type: SUCCESS_GET_SERVER_DATA,\n                winners: winnersData.data,\n                settings: settingsData.data\n            });\n\n        } catch (error) {\n            console.log(error)\n        }\n    };\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Progress from '@material-ui/core/CircularProgress';\n\nimport './Leader.css';\n\nfunction Leader(props) {\n    return (\n        <div className={'componentWrapper'}>\n            <p className={'header'}>Leader Board</p>\n            {props.winners.length > 0 ?\n                props.winners.map(winner => {\n                    return (\n                        <div key={winner.id} className={'row'}>\n                            <div>{winner.winner}</div>\n                            <div>{winner.date}</div>\n                        </div>\n                    )\n                }) :\n                <Progress />\n            }\n        </div>\n    );\n}\n\nLeader.propTypes = {\n    winners: PropTypes.array.isRequired\n};\n\nexport default connect((state) => { return { winners: state.serverData.winners } })(Leader);\n","import axios from '../axios';\nimport { SUCCESS_GET_SERVER_DATA } from './serverData';\n\nexport const SUCCESS_SET_WINNER = 'SUCCESS_SET_WINNER';\nexport const SET_FIELD = 'SET_FIELD';\nexport const SET_USER_FIELD = 'SET_USER_FIELD';\nexport const SET_COMPUTER_FIELD = 'SET_COMPUTER_FIELD';\nexport const START_AGAIN = 'START_AGAIN';\n\nexport function setWinner(data) {\n  return async dispatch => {\n    try {\n      await axios.post(`/winners`, data);\n      const [settingsData, winnersData] = await Promise.all([axios.get(`/game-settings`), axios.get(`/winners`)]);\n      const gameWinner = data.winner\n\n      dispatch({\n        type: SUCCESS_GET_SERVER_DATA,\n        winners: winnersData.data,\n        settings: settingsData.data\n      });\n\n      dispatch({\n        type: SUCCESS_SET_WINNER,\n        gameWinner\n      });\n    } catch (error) {\n      console.log(error)\n    }\n  };\n}\n\nexport function setActiveField(id) {\n  return async dispatch => {\n    dispatch({\n      type: SET_FIELD,\n      id\n    })\n  }\n}\n\nexport function setUserField(id) {\n  return async dispatch => {\n    dispatch({\n      type: SET_USER_FIELD,\n      id\n    })\n  }\n}\n\nexport function setComputerField() {\n  return async dispatch => {\n    dispatch({\n      type: SET_COMPUTER_FIELD\n    })\n  }\n}\n\nexport function startAgain() {\n  return async dispatch => {\n    dispatch({\n      type: START_AGAIN\n    })\n  }\n}\n\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport classNames from 'classnames';\nimport {\n    TextField,\n    Button,\n    MenuItem,\n} from '@material-ui/core/'\nimport * as GameActions from '../../actions/game';\n\nimport './Game.css';\n\nclass Game extends PureComponent {\n    static propTypes = {\n        settings: PropTypes.object.isRequired,\n        gameWinner: PropTypes.string.isRequired,\n        setWinner: PropTypes.func.isRequired,\n        fields: PropTypes.array.isRequired,\n        startAgain: PropTypes.func.isRequired,\n        setUserField: PropTypes.func.isRequired\n    }\n\n    state = {\n        mode: '',\n        winner: ''\n    }\n\n    startGame = () => {\n        const { setActiveField, fields, settings, setComputerField, setWinner } = this.props;\n        const { mode, winner } = this.state;\n        const activeArr = fields.filter(field => field.isActive);\n\n        if ((fields.length - activeArr.length) >= settings[mode].field) {\n            const computerFields = fields.filter(f => f.isRed).length;\n            const userFileds = fields.filter(f => f.isGreen).length;\n            setComputerField();\n            setWinner({ winner: userFileds > computerFields ? winner : 'Computer', date: moment().format('HH:mm; DD MMMM YYYY') })\n            clearInterval(this.interval)\n        } else {\n            const { id } = activeArr[Math.floor(Math.random() * activeArr.length)];\n            setActiveField(id);\n        }\n\n    }\n\n    handleChange = key => async e => {\n        await this.setState({ [key]: e.target.value })\n    }\n\n    handleAgain = async () => {\n        await this.props.startAgain();\n        await this.handleStart()\n    }\n\n    handleStart = async () => {\n        const { settings } = this.props;\n        const { mode } = this.state;\n        this.interval = setInterval(this.startGame, settings[mode].delay);\n    }\n\n    handleSetField = e => {\n        this.props.setUserField(e.target.id);\n    }\n\n    renderInput = () => {\n        const { settings, gameWinner } = this.props;\n        const { mode, winner } = this.state;\n\n        return (\n            <div className={'inputBlock'}>\n                <TextField\n                    select\n                    label=\"Pick game mode\"\n                    value={mode}\n                    className={'input'}\n                    onChange={this.handleChange('mode')}\n                >\n                    {Object.keys(settings).map(setting => (\n                        <MenuItem key={settings[setting].field} value={setting}>\n                            {setting}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                    placeholder={'Enter your name'}\n                    label={\"Enter your name\"}\n                    value={winner}\n                    onChange={this.handleChange('winner')}\n                    className={'input'}\n                />\n                <Button\n                    variant='contained'\n                    className={'button'}\n                    disabled={(!winner || !mode)}\n                    onClick={gameWinner ? this.handleAgain : this.handleStart}\n            >\n                    {gameWinner ? 'Play Again' : 'Play'}\n                </Button>\n            </div >\n        )\n    }\n    render() {\n        const { gameWinner, fields } = this.props;\n\n        return (\n            <div className={'componentWrapper'}>\n                {this.renderInput()}\n                {gameWinner ? gameWinner : ''}\n                <div className={'gameWrapper'}>\n                    {fields.map(field => {\n                        return (\n                            <div\n                                key={field.id}\n                                id={field.id}\n                                onClick={field.isBlue ? this.handleSetField : () => { }}\n                                className={classNames('field',\n                                    {\n                                        'active': field.isBlue,\n                                        'user': field.isGreen,\n                                        'computer': field.isRed\n                                    }\n                                )}\n                            />\n                        )\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect((state) => {\n    return {\n        settings: state.serverData.settings,\n        gameWinner: state.game.gameWinner,\n        fields: state.game.fields\n    }\n}, { ...GameActions })(Game);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n//import PropTypes from 'prop-types';\nimport * as ServerData from './actions/serverData';\nimport Leader from './components/Leader';\nimport Game from './components/Game';\n\nimport './App.css';\n\nclass App extends Component {\n  \n  async componentDidMount() {\n    await this.props.getServerData()\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Game />\n        <Leader />\n      </div>\n    );\n  }\n}\nexport default connect(state => {\n  return {}\n}, { ...ServerData })(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  SUCCESS_GET_SERVER_DATA\n} from '../actions/serverData';\n\nconst initialState = {\n  winners: [],\n  settings: {}\n};\n\nexport default function serverData(state = initialState, action) {\n  const { type, winners, settings } = action;\n\n  switch (type) {\n    case SUCCESS_GET_SERVER_DATA:\n      return { ...state, winners, settings };\n    default:\n      return state;\n  }\n}\n","import uuid from 'uuid'\nimport {\n  SUCCESS_SET_WINNER,\n  SET_FIELD,\n  SET_USER_FIELD,\n  SET_COMPUTER_FIELD,\n  START_AGAIN\n} from '../actions/game';\nconst i = [\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  },\n  {\n    id: uuid(),\n    isBlue: false,\n    isRed: false,\n    isGreen: false,\n    isActive: true\n  }\n]\nconst initialState = {\n  gameWinner: '',\n  fields: [...i.map(d => { return { ...d } })]\n};\n\nexport default function serverData(state = initialState, action) {\n  const { type, gameWinner, id } = action;\n\n  switch (type) {\n    case SUCCESS_SET_WINNER:\n      return { ...state, gameWinner };\n    case SET_FIELD:\n      return {\n        ...state, fields: state.fields.map(field => {\n          const newField = field;\n\n          if (newField.isBlue) {\n            newField.isRed = true;\n            newField.isBlue = false;\n            newField.isActive = false;\n          }\n\n          if (newField.id === id) {\n            newField.isBlue = true;\n            newField.isActive = false;\n          }\n\n          return { ...newField };\n        })\n      }\n    case SET_USER_FIELD:\n      return {\n        ...state, fields: state.fields.map(field => {\n          const newField = field;\n\n          if (newField.id === id) {\n            newField.isGreen = true;\n            newField.isBlue = false;\n            newField.isActive = false;\n          }\n\n          return { ...newField };\n        })\n      };\n    case SET_COMPUTER_FIELD:\n      return {\n        ...state, fields: state.fields.map(field => {\n          const newField = field;\n\n          if (newField.isBlue) {\n            newField.isRed = true;\n            newField.isBlue = false;\n            newField.isActive = false;\n          }\n\n          return { ...newField };\n        })\n      }\n    case START_AGAIN:\n      return {\n        gameWinner: initialState.gameWinner,\n        fields: [...i.map(d => { return { ...d } })]\n      }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport serverData from './serverData';\nimport game from './game'\n\nexport default combineReducers({\n    serverData,\n    game\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store/configureStore.js';\n\nimport './index.css';\nconst store = configureStore();\n\nReactDOM.render(\n\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { applyMiddleware, createStore, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nexport default function configureStore() {\n    const composeEnhancers = process.env.NODE_ENV !== 'production' ?\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose : // eslint-disable-line\n        compose;\n\n    const store = createStore(\n        rootReducer,\n        composeEnhancers(\n            applyMiddleware(thunkMiddleware)\n        )\n    );\n\n    if (module.hot) {\n        module.hot.accept('../reducers', () => {\n            const nextRootReducer = require('../reducers/index').default;\n\n            store.replaceReducer(nextRootReducer);\n        });\n    }\n\n    return store;\n}\n"],"sourceRoot":""}